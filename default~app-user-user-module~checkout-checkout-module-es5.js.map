{"version":3,"sources":["src/app/shared/modules/address-form/address-form.component.html","src/app/shared/modules/address-form/address-form.component.scss","src/app/shared/modules/address-form/address-form.component.ts","src/app/shared/modules/address-form/address-form.module.ts","src/app/shared/modules/address-form/country.service.ts","src/app/shared/validators/register-validation.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div [formGroup]=\\\"parentForm\\\" *ngIf=\\\"!loading\\\">\\r\\n  <div [formGroupName]=\\\"groupName\\\">\\r\\n    <div *ngIf=\\\"showNames\\\">\\r\\n      <mat-form-field>\\r\\n        <input type=\\\"text\\\" matInput placeholder=\\\"First Name\\\" formControlName=\\\"firstName\\\" autocomplete=\\\"given-name\\\"\\r\\n          [errorStateMatcher]=\\\"matcher\\\" required>\\r\\n        <mat-error *ngIf=\\\"parentForm.get(groupName).get('firstName').hasError('required')\\\">\\r\\n          First name is required\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <input type=\\\"text\\\" matInput placeholder=\\\"Last Name\\\" formControlName=\\\"lastName\\\" autocomplete=\\\"family-name\\\"\\r\\n          [errorStateMatcher]=\\\"matcher\\\" required>\\r\\n        <mat-error *ngIf=\\\"parentForm.get(groupName).get('lastName').hasError('required')\\\">\\r\\n          Last name is required\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n    </div>\\r\\n    <mat-form-field>\\r\\n      <input type=\\\"text\\\" matInput placeholder=\\\"House number and street name\\\" formControlName=\\\"address1\\\"\\r\\n        autocomplete=\\\"address-line1\\\" [errorStateMatcher]=\\\"matcher\\\" required>\\r\\n      <mat-error *ngIf=\\\"parentForm.get(groupName).get('address1').hasError('required')\\\">\\r\\n        This field is required\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n      <input type=\\\"text\\\" matInput placeholder=\\\"Apartment, suite, unit etc. (optional)\\\" formControlName=\\\"address2\\\"\\r\\n        autocomplete=\\\"address-line2\\\">\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n      <input type=\\\"text\\\" matInput placeholder=\\\"Town / City\\\" formControlName=\\\"city\\\" autocomplete=\\\"address-level2\\\"\\r\\n        [errorStateMatcher]=\\\"matcher\\\" required>\\r\\n      <mat-error *ngIf=\\\"parentForm.get(groupName).get('city').hasError('required')\\\">\\r\\n        This field is required\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n      <input type=\\\"text\\\" matInput placeholder=\\\"County\\\" formControlName=\\\"region\\\" autocomplete=\\\"address-level1\\\"\\r\\n        [errorStateMatcher]=\\\"matcher\\\">\\r\\n      <mat-error *ngIf=\\\"parentForm.get(groupName).get('region').hasError('required')\\\">\\r\\n        This field is required\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n      <mat-label>Country</mat-label>\\r\\n      <select matNativeControl formControlName=\\\"country\\\" class=\\\"browser-default\\\" required>\\r\\n        <option *ngFor=\\\"let country of countries\\\" [value]=\\\"country.name\\\">{{ country.name }}</option>\\r\\n      </select>\\r\\n      <mat-error *ngIf=\\\"parentForm.get(groupName).get('country').hasError('required')\\\">\\r\\n        This field is required\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n      <input type=\\\"text\\\" matInput placeholder=\\\"Postcode\\\" formControlName=\\\"postcode\\\" autocomplete=\\\"postal-code\\\"\\r\\n        [errorStateMatcher]=\\\"matcher\\\" [required]=\\\"postcodeRequired\\\">\\r\\n      <mat-error *ngIf=\\\"parentForm.get(groupName).get('postcode').hasError('required')\\\">\\r\\n        This field is required\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field *ngIf=\\\"showContact\\\">\\r\\n      <input type=\\\"tel\\\" matInput placeholder=\\\"Mobile Phone Number\\\" formControlName=\\\"phone\\\" autocomplete=\\\"tel\\\"\\r\\n        [errorStateMatcher]=\\\"matcher\\\" required>\\r\\n      <mat-hint>We need your mobile number in case we need to text you with urgent issues or the courier may need to\\r\\n        call about your\\r\\n        delivery.\\r\\n      </mat-hint>\\r\\n      <mat-error *ngIf=\\\"parentForm.get(groupName).get('phone').hasError('required')\\\">\\r\\n        This field is required\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \":host {\\n  display: block;\\n  margin-bottom: 2rem;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RzL2NsaWVudC9zcmMvYXBwL3NoYXJlZC9tb2R1bGVzL2FkZHJlc3MtZm9ybS9DOlxcVXNlcnNcXFJlaWFuXFxEZXNrdG9wXFxXb3JrXFxGcmVlbGFuY2VcXGJveHhlci1jbGllbnQtY2xvbmUvcHJvamVjdHNcXGNsaWVudFxcc3JjXFxhcHBcXHNoYXJlZFxcbW9kdWxlc1xcYWRkcmVzcy1mb3JtXFxhZGRyZXNzLWZvcm0uY29tcG9uZW50LnNjc3MiLCJwcm9qZWN0cy9jbGllbnQvc3JjL2FwcC9zaGFyZWQvbW9kdWxlcy9hZGRyZXNzLWZvcm0vYWRkcmVzcy1mb3JtLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBQTtFQUNBLG1CQUFBO0FDQ0YiLCJmaWxlIjoicHJvamVjdHMvY2xpZW50L3NyYy9hcHAvc2hhcmVkL21vZHVsZXMvYWRkcmVzcy1mb3JtL2FkZHJlc3MtZm9ybS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBtYXJnaW4tYm90dG9tOiAycmVtO1xyXG59XHJcbiIsIjpob3N0IHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi1ib3R0b206IDJyZW07XG59Il19 */\"","import {\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  FormGroupDirective,\r\n  NgForm,\r\n  Validators\r\n} from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { untilComponentDestroyed } from '@global/untilDestroy';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { CountryService } from './country.service';\r\nimport { CookieService } from '@gorniv/ngx-universal';\r\n\r\n/** Error when invalid control is dirty, touched, or submitted. */\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(\r\n    control: FormControl | null,\r\n    form: FormGroupDirective | NgForm | null\r\n  ): boolean {\r\n    const isSubmitted = form && form.submitted;\r\n    return !!(\r\n      control &&\r\n      control.invalid &&\r\n      (control.dirty || control.touched || isSubmitted)\r\n    );\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'bx-address-form',\r\n  templateUrl: './address-form.component.html',\r\n  styleUrls: ['./address-form.component.scss']\r\n})\r\nexport class AddressFormComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  parentForm: FormGroup;\r\n  @Input()\r\n  address: any;\r\n  @Input()\r\n  groupName: string;\r\n  @Input()\r\n  showNames = false;\r\n  @Input()\r\n  showContact = false;\r\n  @Output()\r\n  public countryChanged: EventEmitter<any> = new EventEmitter<any>();\r\n  loading = true;\r\n  countries: any[] = [];\r\n  addressGroup: FormGroup;\r\n  filteredCountries: Observable<any[]>;\r\n\r\n  matcher = new MyErrorStateMatcher();\r\n  postcodeRequired = true;\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    public country: CountryService,\r\n    private cookieService: CookieService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.country\r\n      .getCountries()\r\n      .pipe(\r\n        map((resp: any) => resp.data),\r\n        untilComponentDestroyed(this)\r\n      )\r\n      .subscribe(resp => {\r\n        this.countries = resp;\r\n        this.createForm();\r\n      });\r\n  }\r\n\r\n  createForm() {\r\n    this.addressGroup = this.fb.group({\r\n      address1: [\r\n        this.address ? this.address.address1 : null,\r\n        [Validators.required]\r\n      ],\r\n      address2: [this.address ? this.address.address2 : null],\r\n      city: [this.address ? this.address.city : null, [Validators.required]],\r\n      region: [this.address ? this.address.region : null],\r\n      country_code: [\r\n        this.address ? this.address.country_code : null,\r\n        [Validators.required]\r\n      ],\r\n      country: [\r\n        this.address ? this.address.country : null,\r\n        [Validators.required]\r\n      ],\r\n      postcode: [this.address ? this.address.postcode : null]\r\n    });\r\n\r\n    if (this.showNames) {\r\n      this.addressGroup.addControl(\r\n        'firstName',\r\n        this.fb.control(this.address ? this.address.firstName : null, [\r\n          Validators.required\r\n        ])\r\n      );\r\n      this.addressGroup.addControl(\r\n        'lastName',\r\n        this.fb.control(this.address ? this.address.lastName : null, [\r\n          Validators.required\r\n        ])\r\n      );\r\n    }\r\n\r\n    if (this.showContact) {\r\n      this.addressGroup.addControl(\r\n        'phone',\r\n        this.fb.control(this.address ? this.address.phone : null, [\r\n          Validators.required\r\n        ])\r\n      );\r\n    }\r\n    this.parentForm.addControl(this.groupName, this.addressGroup);\r\n    this.loading = false;\r\n\r\n    this.subscribeCountryChange();\r\n  }\r\n\r\n  subscribeCountryChange() {\r\n    if (this.address && this.address.country) {\r\n      this.setPostCodeValidation(this.address.country);\r\n    }\r\n\r\n    const countryCodeCtrl = this.addressGroup.controls.country_code\r\n      .valueChanges;\r\n    const countryCtrl = this.addressGroup.controls.country.valueChanges;\r\n    const postcodeCtrl = this.addressGroup.controls.postcode;\r\n    countryCtrl.pipe(untilComponentDestroyed(this)).subscribe(value => {\r\n      const searchCountry = this.countries.find(country => {\r\n        return country.name.toLowerCase().indexOf(value.toLowerCase()) === 0;\r\n      });\r\n      this.setCountryCode(searchCountry);\r\n    });\r\n    countryCodeCtrl\r\n      .pipe(untilComponentDestroyed(this))\r\n      .subscribe(code => this.countryChanged.emit(code));\r\n\r\n    // Set default country\r\n    if (!this.address) {\r\n      const countryCode = this.cookieService.get('country') || 'GB';\r\n      const searchCountry = this.countries.find(country => {\r\n        return (\r\n          country.cca2.toLowerCase().indexOf(countryCode.toLowerCase()) === 0\r\n        );\r\n      });\r\n      if (searchCountry) {\r\n        this.addressGroup.controls.country.setValue(searchCountry.name);\r\n      }\r\n    }\r\n  }\r\n\r\n  setCountryCode(country: any) {\r\n    this.addressGroup.controls.country_code.setValue(country.cca2);\r\n    this.setPostCodeValidation(country.name);\r\n  }\r\n\r\n  setPostCodeValidation(country: string) {\r\n    const postcodeCtrl = this.addressGroup.controls.postcode;\r\n    if (country !== 'Ireland') {\r\n      this.postcodeRequired = true;\r\n      postcodeCtrl.setValidators([Validators.required]);\r\n      postcodeCtrl.updateValueAndValidity();\r\n    } else {\r\n      this.postcodeRequired = false;\r\n      postcodeCtrl.setValidators(null);\r\n      postcodeCtrl.updateValueAndValidity();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MaterialModule } from '@app/material/material.module';\r\n\r\nimport { AddressFormComponent } from './address-form.component';\r\nimport { CountryService } from './country.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ReactiveFormsModule, MaterialModule],\r\n  declarations: [AddressFormComponent],\r\n  providers: [CountryService],\r\n  exports: [AddressFormComponent]\r\n})\r\nexport class AddressFormModule {}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '@env/environment';\r\n\r\n@Injectable()\r\nexport class CountryService {\r\n  private service: any;\r\n  private endpoint: string;\r\n  private host: string = environment.host;\r\n  constructor(private http: HttpClient) {\r\n    this.endpoint = 'country';\r\n  }\r\n\r\n  get url() {\r\n    return `${this.host}/${this.endpoint}`;\r\n  }\r\n\r\n  getCountries() {\r\n    const query: any = {\r\n      $select: ['name', 'cca2', 'altSpellings'],\r\n      $sort: ['name'],\r\n      $limit: 5000\r\n    };\r\n    return this.http.get<any>(this.url, {\r\n      params: query\r\n    });\r\n  }\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\nexport class PasswordValidation {\r\n  static MatchPassword(AC: AbstractControl) {\r\n    const password = AC.get('password').value;\r\n    const confirmPassword = AC.get('confirmPassword').value;\r\n    if (password !== confirmPassword) {\r\n      AC.get('confirmPassword').setErrors({ MatchPassword: true });\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\nexport class EmailValidation {\r\n  static MatchEmail(AC: AbstractControl) {\r\n    const email = AC.get('email').value;\r\n    const confirmEmail = AC.get('confirmEmail').value;\r\n    if (email !== confirmEmail) {\r\n      AC.get('confirmEmail').setErrors({ MatchEmail: true });\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"default~app-user-user-module~checkout-checkout-module-es5.js"}